var fs = require('fs');
var htmlparser = require("htmlparser");
var jspath = require("jspath");

/**
 * Imported storymill html converts to json
 *
 * @param {String} htmlFilePath
 * returns json with story
 * saves json-file
 */
exports.getStoryJson = function (htmlFilePath) {
    var jsonFilePath = htmlFilePath.replace('.sm.html', '.sm.json');

    // Прочитать html-файл
    var htmlString = fs.readFileSync(htmlFilePath, 'utf8');

    // Конвертнуть его в сырой json
    var rawJson = convertHtmlToJson(htmlString);

    // Перегнать сырой json в story формат
    var storyJson = makeStoryJson(rawJson);

    // Сохранить в файл
    fs.writeFileSync(jsonFilePath, JSON.stringify(storyJson, false, 4), encoding='utf8');

    return storyJson;
};


/**
 * @param {String} htmlString Content of html file
 * returns raw json
 */
var convertHtmlToJson = function (htmlString) {
    var handler = new htmlparser.DefaultHandler(function (error){}, {
        verbose: false,
        ignoreWhitespace: true,
        enforceEmptyTags: false
    });

    var parser = new htmlparser
                    .Parser(handler)
                    .parseComplete(htmlString);

    return jspath.apply('.[1].children[1].children', handler.dom);;
}

/**
 * @param {Array} parasArr Collection of paragraphs
 * returns json with story
 */
var makeStoryJson = function (parasArr) {
    var storyJson = [];

    if (parasArr) {
        storyJson = parasArr.map(function(para, index) {
            return {
                tag : para.attribs.class,
                text: para.children[0].data,
                id: index
            };
        })
    }
    return storyJson;
}
