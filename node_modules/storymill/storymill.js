var fs = require('fs');
var sys = require('sys');
var htmlparser = require("htmlparser");
var jspath = require("jspath");
var smCfg = require('storymill/config').get('storymill');
var pdf = require('pdf/pdf');

/**
 * Imported storymill html converts to json
 *
 * @param {String} htmlFilePath
 * returns json with story
 * saves json-file
 */
exports.getStoryJson = function (params) {
    var htmlFilePath = params.path;
    var jsonFilePath = htmlFilePath.replace('.sm.html', '.sm.json');

    // Прочитать html-файл
    var htmlString = fs.readFileSync(htmlFilePath, 'utf8');

    // Удалить из сырого html всё лишнее
    var sanitazedHtmlString = sanitazeHtml(htmlString);

    // Конвертнуть его в сырой json
    var rawJson = convertHtmlToJson(sanitazedHtmlString);

    // Перегнать сырой json в story формат
    var storyJson = makeStoryJson(rawJson, params);

    // Сохранить в файл
    fs.writeFileSync(jsonFilePath, JSON.stringify(storyJson, false, 4), encoding = 'utf8');

    return storyJson;
};

exports.writeFile = function (params) {
    if (params.type === 'pdf') {
        writePdf(params.name);
    } else {
        fs.writeFileSync(smCfg.path.export + params.name + '.' + params.type, replaceResources(params.content), encoding = 'utf8');

        if (params.type === 'html') {
            copyStaticFiles(['css', 'js']);
        }
    }

    return true;
};

var copyStaticFiles = function (techs) {
    techs.forEach(function (tech) {
        var cmd = 'cp ' + smCfg.path.project + 'desktop.bundles/book/_book.' + tech + ' ' + smCfg.path.export;
        sys.exec(cmd, function(err) {
            console.log(err ? err : tech + ' залил');
        });
    });
}

/*
 * Remove <span class="Apple-converted-space"> </span>
 * */
var sanitazeHtml = function (htmlString) {
    return htmlString.replace(/<span .*?>(.*?)<\/span>/gi, '$1');
}

var replaceResources = function (htmlString) {
    return htmlString
            .replace(new RegExp("//localhost:3001/desktop.bundles/.*?/", 'g'), '')
            .replace(new RegExp("//yandex.st", 'g'), 'http://yandex.st')
            .replace(/"book\/\?id=(.*?)"/g, "\"$1.html\"");
}

/**
 * @param {String} htmlString Content of html file
 * returns raw json
 */
var convertHtmlToJson = function (htmlString) {
    var handler = new htmlparser.DefaultHandler(function (error) {
    }, {
        verbose: false,
        ignoreWhitespace: true,
        enforceEmptyTags: false
    });

    var parser = new htmlparser
            .Parser(handler)
            .parseComplete(htmlString);

    return jspath.apply('.[1].children[1].children', handler.dom);
}

/**
 * @param {Array} parasArr Collection of paragraphs
 * returns json with story
 */
var makeStoryJson = function (parasArr, params) {
    var storyJson = {};

    if (parasArr) {
        storyJson.id = params.dir;
        storyJson.title = jspath.apply('.{.id === $id}.title[0]', smCfg.bookList, {id: params.dir});
        storyJson.author = smCfg.author.shortName;
        storyJson.body = parasArr.map(function (para, index) {
            return {
                tag: para.attribs.class,
                text: para.children[0].data,
                id: index
            };
        });
    }
    return storyJson;
}


var writePdf = function (fileName) {
    var pdfPrinter = smCfg.pdfPrinter.default;
    var pdfPrinterParams = smCfg.pdfPrinter.params[pdfPrinter];

    if (smCfg.pdfPrinter.default === 'apacheFop') {
        apacheFop(fileName, pdfPrinterParams);
    } else {
        wkhtmltopdf(fileName, pdfPrinterParams);
    }
};

var wkhtmltopdf = function (fileName, params) {
    var filePath = smCfg.path.export + fileName;

    pdf.generate(filePath + '.html', filePath + '.pdf', substituteParams(fileName, params), function (err, stout) {
        console.log(err || (stout === '' ? 'Pdf is completed' : stout));
    });
};

var substituteParams = function ( fileName, params ) {
    var headerFile = params.global['--header-right'].replace('%fileName%', fileName);
    var xslFile = params.toc['--xsl-style-sheet'].replace("%projectPath%", smCfg.path.project);

    params.global['--header-right'] = headerFile;
    params.toc['--xsl-style-sheet'] = xslFile;

    return params;
};

var apacheFop = function (fileName, params) {
    var cmd = 'fop -c fop-1.1/conf/fop.xconf  -xml 1.xml -xsl 1-fo.xsl -pdf 1.pdf';
    sys.exec(cmd, function(err) {
        console.log(err ? err : tech + ' залил');
    });
}
