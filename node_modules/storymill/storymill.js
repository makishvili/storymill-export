var fs = require('fs');
var htmlparser = require("htmlparser");
var jspath = require("jspath");
var textsCfg = require('storymill/config').get('texts');

/**
 * Imported storymill html converts to json
 *
 * @param {String} htmlFilePath
 * returns json with story
 * saves json-file
 */
exports.getStoryJson = function (params) {
    var htmlFilePath = params.path;
    var jsonFilePath = htmlFilePath.replace('.sm.html', '.sm.json');

    // Прочитать html-файл
    var htmlString = fs.readFileSync(htmlFilePath, 'utf8');

    // Удалить из сырого html всё лишнее
    var sanitazedHtmlString = sanitazeHtml(htmlString);

    // Конвертнуть его в сырой json
    var rawJson = convertHtmlToJson(sanitazedHtmlString);

    // Перегнать сырой json в story формат
    var storyJson = makeStoryJson(rawJson, params);

    // Сохранить в файл
    fs.writeFileSync(jsonFilePath, JSON.stringify(storyJson, false, 4), encoding = 'utf8');

    return storyJson;
};

exports.writeFile = function (params) {
    var filePath = textsCfg.dir + params.name + '/' + params.name + '.' + params.type;
    fs.writeFileSync(filePath, replaceResources(params.content), encoding = 'utf8');
    return true;
};

/*
 * Remove <span class="Apple-converted-space"> </span>
 * */
var sanitazeHtml = function (htmlString) {
    return htmlString.replace(/<span .*?>(.*?)<\/span>/gi, '$1');
}

var replaceResources = function (htmlString) {
    return htmlString
            .replace(new RegExp("//localhost:3001/desktop.bundles/.*?/", 'g'), '')
            .replace(new RegExp("//yandex.st", 'g'), 'http://yandex.st')
            .replace(/"book\/\?id=(.*?)"/g, "\"$1.html\"");
}

/**
 * @param {String} htmlString Content of html file
 * returns raw json
 */
var convertHtmlToJson = function (htmlString) {
    var handler = new htmlparser.DefaultHandler(function (error) {
    }, {
        verbose: false,
        ignoreWhitespace: true,
        enforceEmptyTags: false
    });

    var parser = new htmlparser
            .Parser(handler)
            .parseComplete(htmlString);

    return jspath.apply('.[1].children[1].children', handler.dom);
}

/**
 * @param {Array} parasArr Collection of paragraphs
 * returns json with story
 */
var makeStoryJson = function (parasArr, params) {
    var storyJson = {};

    if (parasArr) {
        storyJson.id = params.dir;
        storyJson.title = jspath.apply('.{.id === $id}.title[0]', textsCfg.bookList, {id: params.dir});
        storyJson.author = textsCfg.author.shortName;
        storyJson.body = parasArr.map(function (para, index) {
            return {
                tag: para.attribs.class,
                text: para.children[0].data,
                id: index
            };
        });
    }
    return storyJson;
}
